(function () {
  'use strict';

  const bufferToBlob = (record) => {
      const blob = new Blob([record.buffer], { type: record.mimeType });
      return {
          name: record.name,
          mimeType: record.mimeType,
          category: record.category,
          file: blob,
      };
  };
  const blobToBuffer = (record) => {
      return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.addEventListener('loadend', (e) => {
              const buffer = reader.result;
              resolve({
                  name: record.name,
                  mimeType: record.mimeType,
                  category: record.category,
                  buffer: buffer,
              });
          });
          reader.addEventListener('error', reject);
          reader.readAsArrayBuffer(record.file);
      });
  };

  class Storage {
      constructor(db) {
          this.db = null;
          this.db = db;
      }
      static open() {
          return new Promise((resolve, reject) => {
              const dbOpenRequest = indexedDB.open(Storage.DB_NAME, Storage.VERSION);
              dbOpenRequest.onsuccess = (e) => {
                  const request = e.target;
                  const db = request.result;
                  resolve(new Storage(db));
              };
              dbOpenRequest.onerror = (e) => {
                  const error = e.target;
                  console.log('Error: : ', error);
                  reject(e);
              };
              dbOpenRequest.onupgradeneeded = (e) => {
                  const request = e.target;
                  const db = request.result;
                  const objectStore = db.createObjectStore(Storage.STORE_NAME);
                  objectStore.createIndex('name', 'name', { unique: false });
                  objectStore.createIndex('category', 'category', { unique: false });
              };
          });
      }
      store(documentRecord) {
          return blobToBuffer(documentRecord).then((documentRecordForStorage) => new Promise((resolve, reject) => {
              var _a;
              let generatedId = null;
              const transaction = (_a = this.db) === null || _a === void 0 ? void 0 : _a.transaction(Storage.STORE_NAME, 'readwrite');
              if (!transaction) {
                  reject(new Error('Null transaction object'));
                  return;
              }
              transaction.oncomplete = (event) => {
                  if (generatedId === null) {
                      reject(new Error('Null generated category'));
                      return;
                  }
                  resolve(generatedId);
              };
              transaction.onerror = (event) => {
                  reject(event);
              };
              const store = transaction.objectStore(Storage.STORE_NAME);
              const request = store.put(documentRecordForStorage, documentRecordForStorage.category);
              request.onsuccess = (event) => {
                  const request = event.target;
                  generatedId = request.result;
                  console.log('Request is success: ', request.result);
              };
          }));
      }
      select(id) {
          return new Promise((resolve, reject) => {
              var _a;
              let imageRecord = null;
              const transaction = (_a = this.db) === null || _a === void 0 ? void 0 : _a.transaction(Storage.STORE_NAME, 'readonly');
              if (!transaction) {
                  reject(new Error('Null transaction object'));
                  return;
              }
              transaction.oncomplete = (event) => {
                  resolve(imageRecord);
              };
              transaction.onerror = (event) => {
                  reject(event);
              };
              const store = transaction.objectStore(Storage.STORE_NAME);
              const request = store.get(id);
              request.onsuccess = (event) => {
                  const request = event.target;
                  imageRecord = request.result;
                  console.log('Request is success: ');
              };
          }).then((r) => {
              if (!r) {
                  return null;
              }
              return bufferToBlob(r);
          });
      }
  }
  Storage.VERSION = 6;
  Storage.STORE_NAME = `images${Storage.VERSION}`;
  Storage.KEY_PATH = 'category';
  Storage.DB_NAME = 'documentsDb';

  var DocumentCategory;
  (function (DocumentCategory) {
      DocumentCategory["YourPhoto"] = "YourPhoto";
      DocumentCategory["DriverLicense"] = "DriverLicense";
      DocumentCategory["W2"] = "W2";
  })(DocumentCategory || (DocumentCategory = {}));

  let openingStorage = null;
  const onChange = async (event) => {
      const input = event.target;
      const files = input.files || [];
      console.log('Files: ', files);
      if (!files.length) {
          return;
      }
      const firstFile = files[0];
      const preview = document.getElementById('preview');
      if (!preview) {
          return;
      }
      if (firstFile.type === 'application/pdf') {
          preview.alt = 'This is the pdf file';
          preview.src = '';
          return;
      }
      const storage = await openingStorage;
      const res = await (storage === null || storage === void 0 ? void 0 : storage.store({
          category: DocumentCategory.DriverLicense,
          name: firstFile.name,
          file: firstFile,
          mimeType: firstFile.type,
      }));
      console.log('res: ', res);
      const record = await (storage === null || storage === void 0 ? void 0 : storage.select(DocumentCategory.DriverLicense));
      console.log('record: ', record);
      if (!record) {
          console.log('There is no record with such category: ', DocumentCategory.DriverLicense);
          return;
      }
      const imageUrl = URL.createObjectURL(record.file);
      preview.src = imageUrl;
      preview.alt = `Uploaded image ${firstFile.name}`;
  };
  const onLoad = async () => {
      const input = document.getElementById('input');
      if (!input) {
          return;
      }
      input.addEventListener('change', onChange);
      openingStorage = Storage.open();
  };
  document.addEventListener('DOMContentLoaded', onLoad);

}());
