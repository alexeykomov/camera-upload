(function () {
  'use strict';

  class Storage {
      constructor(db) {
          this.db = null;
          this.db = db;
      }
      static open() {
          return new Promise((resolve, reject) => {
              const dbOpenRequest = indexedDB.open(Storage.DB_NAME, Storage.VERSION);
              dbOpenRequest.onsuccess = (e) => {
                  const request = e.target;
                  const db = request.result;
                  resolve(new Storage(db));
              };
              dbOpenRequest.onerror = (e) => {
                  const error = e.target;
                  console.log('Error: : ', error);
                  reject(e);
              };
              dbOpenRequest.onupgradeneeded = (e) => {
                  const request = e.target;
                  const db = request.result;
                  const objectStore = db.createObjectStore(Storage.STORE_NAME, {
                      autoIncrement: true,
                  });
                  objectStore.createIndex('name', 'name', { unique: false });
                  objectStore.transaction.oncomplete = () => { };
              };
          });
      }
      store(imageRecord) {
          return new Promise((resolve, reject) => {
              var _a;
              const transaction = (_a = this.db) === null || _a === void 0 ? void 0 : _a.transaction(Storage.STORE_NAME, 'readwrite');
              if (!transaction) {
                  reject(new Error('Null transaction object'));
                  return;
              }
              transaction.oncomplete = (event) => {
                  const request = event.target;
                  resolve(request.result);
              };
              transaction.onerror = (event) => {
                  reject(event);
              };
              const store = transaction.objectStore(Storage.STORE_NAME);
              const request = store.add(imageRecord);
              request.onsuccess = () => {
                  console.log('Request is success: ');
              };
          });
      }
      select(id) {
          return new Promise((resolve, reject) => {
              var _a;
              const transaction = (_a = this.db) === null || _a === void 0 ? void 0 : _a.transaction(Storage.STORE_NAME, 'readonly');
              if (!transaction) {
                  reject(new Error('Null transaction object'));
                  return;
              }
              transaction.oncomplete = (event) => {
                  const request = event.target;
                  resolve(request.result);
              };
              transaction.onerror = (event) => {
                  reject(event);
              };
              const store = transaction.objectStore(Storage.STORE_NAME);
              const request = store.get(id);
              request.onsuccess = () => {
                  console.log('Request is success: ');
              };
          });
      }
  }
  Storage.VERSION = 2;
  Storage.STORE_NAME = 'images2';
  Storage.KEY_PATH = 'id';
  Storage.DB_NAME = 'documentsDb';

  let openedStorage = null;
  const onChange = async (event) => {
      const input = event.target;
      const files = input.files || [];
      console.log('Files: ', files);
      if (!files.length) {
          return;
      }
      const firstFile = files[0];
      const preview = document.getElementById('preview');
      if (!preview) {
          return;
      }
      if (firstFile.type === 'application/pdf') {
          preview.alt = 'This is the pdf file';
          preview.src = '';
          return;
      }
      const blob = new Blob([firstFile], { type: firstFile.type });
      const storage = await openedStorage;
      const res = await (storage === null || storage === void 0 ? void 0 : storage.store({
          name: firstFile.name,
          file: firstFile,
      }));
      console.log('res: ', res);
      const record = await (storage === null || storage === void 0 ? void 0 : storage.select(1));
      console.log('record: ', record);
      const imageUrl = URL.createObjectURL(blob);
      preview.src = imageUrl;
      preview.alt = `Uploaded image ${firstFile.name}`;
  };
  const onLoad = async () => {
      const input = document.getElementById('input');
      if (!input) {
          return;
      }
      input.addEventListener('change', onChange);
      openedStorage = Storage.open();
  };
  document.addEventListener('DOMContentLoaded', onLoad);

}());
